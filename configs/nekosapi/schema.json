{"openapi": "3.0.2", "info": {"title": "Nekos API", "version": "3", "description": "An open source anime art API."}, "paths": {"/v3/": {"get": {"operationId": "nekosapi_api_index", "summary": "Get a summary of the API.", "parameters": [], "responses": {"200": {"description": "OK"}}, "description": "Returns a bunch of data about the API, like endpoints, versions, and more. This is not really intended to be used by programs, but rather for users (devs) to see when they first use the API."}}, "/v3/images": {"get": {"operationId": "nekosapi_images_api_images", "summary": "Get all images", "parameters": [{"in": "query", "name": "rating", "schema": {"title": "Age Rating", "description": "The age rating of the image.", "q": "rating__in", "type": "array", "items": {"type": "string"}}, "required": false, "description": "The age rating of the image."}, {"in": "query", "name": "is_original", "schema": {"title": "Is Original", "description": "Whether the image's idea is original or it uses characters/settings/content from another place (not original).", "type": "boolean"}, "required": false, "description": "Whether the image's idea is original or it uses characters/settings/content from another place (not original)."}, {"in": "query", "name": "is_screenshot", "schema": {"title": "Is Screenshot", "description": "Whether the image is a screenshot of an anime ep./manga page.", "type": "boolean"}, "required": false, "description": "Whether the image is a screenshot of an anime ep./manga page."}, {"in": "query", "name": "is_flagged", "schema": {"title": "Is Flagged", "description": "Whether the image is flagged by mods.", "type": "boolean"}, "required": false, "description": "Whether the image is flagged by mods."}, {"in": "query", "name": "is_animated", "schema": {"title": "Is Animated", "description": "Whether the image is animated or not. This'll become useful in the future when we add GIFs.", "type": "boolean"}, "required": false, "description": "Whether the image is animated or not. This'll become useful in the future when we add GIFs."}, {"in": "query", "name": "artist", "schema": {"title": "Artist", "description": "The artist's ID.", "type": "integer"}, "required": false, "description": "The artist's ID."}, {"in": "query", "name": "character", "schema": {"title": "Character(s)", "description": "The character's ID.", "type": "array", "items": {"type": "integer"}}, "required": false, "description": "The character's ID."}, {"in": "query", "name": "tag", "schema": {"title": "Tag(s)", "description": "The tag's ID.", "type": "array", "items": {"type": "integer"}}, "required": false, "description": "The tag's ID."}, {"in": "query", "name": "limit", "schema": {"title": "Limit", "default": 100, "minimum": 1, "maximum": 100, "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"title": "Offset", "default": 0, "minimum": 0, "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PagedImageSchema"}}}}}, "description": "Returns a paginated list of all the verified images in the API.", "tags": ["Images"]}}, "/v3/images/random": {"get": {"operationId": "nekosapi_images_api_random_images", "summary": "Get random images", "parameters": [{"in": "query", "name": "rating", "schema": {"title": "Age Rating", "description": "The age rating of the image.", "q": "rating__in", "type": "array", "items": {"type": "string"}}, "required": false, "description": "The age rating of the image."}, {"in": "query", "name": "is_original", "schema": {"title": "Is Original", "description": "Whether the image's idea is original or it uses characters/settings/content from another place (not original).", "type": "boolean"}, "required": false, "description": "Whether the image's idea is original or it uses characters/settings/content from another place (not original)."}, {"in": "query", "name": "is_screenshot", "schema": {"title": "Is Screenshot", "description": "Whether the image is a screenshot of an anime ep./manga page.", "type": "boolean"}, "required": false, "description": "Whether the image is a screenshot of an anime ep./manga page."}, {"in": "query", "name": "is_flagged", "schema": {"title": "Is Flagged", "description": "Whether the image is flagged by mods.", "type": "boolean"}, "required": false, "description": "Whether the image is flagged by mods."}, {"in": "query", "name": "is_animated", "schema": {"title": "Is Animated", "description": "Whether the image is animated or not. This'll become useful in the future when we add GIFs.", "type": "boolean"}, "required": false, "description": "Whether the image is animated or not. This'll become useful in the future when we add GIFs."}, {"in": "query", "name": "artist", "schema": {"title": "Artist", "description": "The artist's ID.", "type": "integer"}, "required": false, "description": "The artist's ID."}, {"in": "query", "name": "character", "schema": {"title": "Character(s)", "description": "The character's ID.", "type": "array", "items": {"type": "integer"}}, "required": false, "description": "The character's ID."}, {"in": "query", "name": "tag", "schema": {"title": "Tag(s)", "description": "The tag's ID.", "type": "array", "items": {"type": "integer"}}, "required": false, "description": "The tag's ID."}, {"in": "query", "name": "limit", "schema": {"title": "Limit", "default": 100, "minimum": 1, "maximum": 100, "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PagedImageSchema"}}}}}, "description": "Returns x random images. It supports all the same filters than the /images endpoint.", "tags": ["Images"]}}, "/v3/images/random/file": {"get": {"operationId": "nekosapi_images_api_random_image_file", "summary": "Get a random image file redirect", "parameters": [{"in": "query", "name": "rating", "schema": {"title": "Age Rating", "description": "The age rating of the image.", "q": "rating__in", "type": "array", "items": {"type": "string"}}, "required": false, "description": "The age rating of the image."}, {"in": "query", "name": "is_original", "schema": {"title": "Is Original", "description": "Whether the image's idea is original or it uses characters/settings/content from another place (not original).", "type": "boolean"}, "required": false, "description": "Whether the image's idea is original or it uses characters/settings/content from another place (not original)."}, {"in": "query", "name": "is_screenshot", "schema": {"title": "Is Screenshot", "description": "Whether the image is a screenshot of an anime ep./manga page.", "type": "boolean"}, "required": false, "description": "Whether the image is a screenshot of an anime ep./manga page."}, {"in": "query", "name": "is_flagged", "schema": {"title": "Is Flagged", "description": "Whether the image is flagged by mods.", "type": "boolean"}, "required": false, "description": "Whether the image is flagged by mods."}, {"in": "query", "name": "is_animated", "schema": {"title": "Is Animated", "description": "Whether the image is animated or not. This'll become useful in the future when we add GIFs.", "type": "boolean"}, "required": false, "description": "Whether the image is animated or not. This'll become useful in the future when we add GIFs."}, {"in": "query", "name": "artist", "schema": {"title": "Artist", "description": "The artist's ID.", "type": "integer"}, "required": false, "description": "The artist's ID."}, {"in": "query", "name": "character", "schema": {"title": "Character(s)", "description": "The character's ID.", "type": "array", "items": {"type": "integer"}}, "required": false, "description": "The character's ID."}, {"in": "query", "name": "tag", "schema": {"title": "Tag(s)", "description": "The tag's ID.", "type": "array", "items": {"type": "integer"}}, "required": false, "description": "The tag's ID."}], "responses": {"200": {"description": "OK"}}, "description": "Redirects to a random image file URL.", "tags": ["Images"]}}, "/v3/images/report": {"post": {"operationId": "nekosapi_images_api_image_report", "summary": "Create an image report", "parameters": [{"in": "query", "name": "id", "schema": {"title": "Id", "type": "integer"}, "required": false}, {"in": "query", "name": "url", "schema": {"title": "Url", "type": "string"}, "required": false}], "responses": {"204": {"description": "No Content"}}, "description": "Reports an image.", "tags": ["Images"]}}, "/v3/images/tags": {"get": {"operationId": "nekosapi_images_api_tags", "summary": "Get all tags", "parameters": [{"in": "query", "name": "search", "schema": {"title": "Search", "description": "Search for a tag by name or description.", "q": ["name__icontains", "description__icontains"], "expression_operator": "OR", "type": "string"}, "required": false, "description": "Search for a tag by name or description."}, {"in": "query", "name": "is_nsfw", "schema": {"title": "Is NSFW", "description": "Whether the tag is NSFW or not.", "type": "boolean"}, "required": false, "description": "Whether the tag is NSFW or not."}, {"in": "query", "name": "limit", "schema": {"title": "Limit", "default": 100, "minimum": 1, "maximum": 100, "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"title": "Offset", "default": 0, "minimum": 0, "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PagedTagSchema"}}}}}, "description": "Returns a list of all tags in the API. You can use this endpoint to create filters in your app.", "tags": ["Images"]}}, "/v3/images/tags/{id}": {"get": {"operationId": "nekosapi_images_api_tag", "summary": "Get a tag by ID", "parameters": [{"in": "path", "name": "id", "schema": {"title": "Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TagSchema"}}}}}, "description": "Returns a tag by it's ID. You'll get a 404 if the tag doesn't exist.", "tags": ["Images"]}}, "/v3/images/tags/{id}/images": {"get": {"operationId": "nekosapi_images_api_tag_images", "summary": "Get a tag's images", "parameters": [{"in": "path", "name": "id", "schema": {"title": "Id", "type": "integer"}, "required": true}, {"in": "query", "name": "limit", "schema": {"title": "Limit", "default": 100, "minimum": 1, "maximum": 100, "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"title": "Offset", "default": 0, "minimum": 0, "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PagedImageSchema"}}}}}, "description": "Returns a paginated list of a tag's images.", "tags": ["Images"]}}, "/v3/images/{id}": {"get": {"operationId": "nekosapi_images_api_image", "summary": "Get an image by ID", "parameters": [{"in": "path", "name": "id", "schema": {"title": "Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ImageSchema"}}}}}, "description": "Returns an image by it's ID. You'll get a 404 if the image doesn't exist. (This endpoint is here below because all the previous ones are resolved first).", "tags": ["Images"]}}, "/v3/images/{id}/artist": {"get": {"operationId": "nekosapi_images_api_image_artist", "summary": "Get an image's artist", "parameters": [{"in": "path", "name": "id", "schema": {"title": "Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ArtistSchema"}}}}}, "description": "Returns the artist of the image.", "tags": ["Images"]}}, "/v3/images/{id}/characters": {"get": {"operationId": "nekosapi_images_api_image_characters", "summary": "Get an image's characters", "parameters": [{"in": "path", "name": "id", "schema": {"title": "Id", "type": "integer"}, "required": true}, {"in": "query", "name": "limit", "schema": {"title": "Limit", "default": 100, "minimum": 1, "maximum": 100, "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"title": "Offset", "default": 0, "minimum": 0, "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PagedCharacterSchema"}}}}}, "description": "Returns the characters of the image.", "tags": ["Images"]}}, "/v3/images/{id}/tags": {"get": {"operationId": "nekosapi_images_api_image_tags", "summary": "Get an image's tags", "parameters": [{"in": "path", "name": "id", "schema": {"title": "Id", "type": "integer"}, "required": true}, {"in": "query", "name": "limit", "schema": {"title": "Limit", "default": 100, "minimum": 1, "maximum": 100, "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"title": "Offset", "default": 0, "minimum": 0, "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PagedTagSchema"}}}}}, "description": "Returns the tags of the image.", "tags": ["Images"]}}, "/v3/artists": {"get": {"operationId": "nekosapi_artists_api_artists", "summary": "Get all artists", "parameters": [{"in": "query", "name": "search", "schema": {"title": "Search", "description": "Search term. Will return all tags with this term(s) in their name or description.", "q": ["name__icontains", "aliases__icontains"], "expression_operator": "OR", "type": "string"}, "required": false, "description": "Search term. Will return all tags with this term(s) in their name or description."}, {"in": "query", "name": "policy_repost", "schema": {"title": "Reposting", "description": "Does this artist allow you to repost their art in other places?", "type": "boolean"}, "required": false, "description": "Does this artist allow you to repost their art in other places?"}, {"in": "query", "name": "policy_credit", "schema": {"title": "Crediting", "description": "Are you required to credit the artist when using their art?", "type": "boolean"}, "required": false, "description": "Are you required to credit the artist when using their art?"}, {"in": "query", "name": "policy_ai", "schema": {"title": "AI Training", "description": "Does the artist allow you to use their art for AI projects (AI training)?", "type": "boolean"}, "required": false, "description": "Does the artist allow you to use their art for AI projects (AI training)?"}, {"in": "query", "name": "limit", "schema": {"title": "Limit", "default": 100, "minimum": 1, "maximum": 100, "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"title": "Offset", "default": 0, "minimum": 0, "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PagedArtistSchema"}}}}}, "description": "Returns a paginated list of all artists listed in the API.", "tags": ["Artists"]}}, "/v3/artists/{id}": {"get": {"operationId": "nekosapi_artists_api_artist", "summary": "Get an artist by ID", "parameters": [{"in": "path", "name": "id", "schema": {"title": "Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ArtistSchema"}}}}}, "description": "Returns a single artist by it's ID. You'll get a 404 if the artist doesn't exist.", "tags": ["Artists"]}}, "/v3/artists/{id}/images": {"get": {"operationId": "nekosapi_artists_api_artist_images", "summary": "Get an artist's images", "parameters": [{"in": "path", "name": "id", "schema": {"title": "Id", "type": "integer"}, "required": true}, {"in": "query", "name": "limit", "schema": {"title": "Limit", "default": 100, "minimum": 1, "maximum": 100, "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"title": "Offset", "default": 0, "minimum": 0, "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PagedImageSchema"}}}}}, "description": "Returns a paginated list of an artist's images.", "tags": ["Artists"]}}, "/v3/characters": {"get": {"operationId": "nekosapi_characters_api_characters", "summary": "Get all characters", "parameters": [{"in": "query", "name": "search", "schema": {"title": "Search", "q": ["name__icontains", "aliases__icontains", "description__icontains"], "expression_operator": "OR", "type": "string"}, "required": false}, {"in": "query", "name": "age", "schema": {"title": "Age(s)", "description": "One or more of the character's (official) ages.", "q": "ages__in", "type": "array", "items": {"type": "integer"}}, "required": false, "description": "One or more of the character's (official) ages."}, {"in": "query", "name": "gender", "schema": {"title": "Gender", "description": "The character's gender.", "q": "gender__iexact", "type": "string"}, "required": false, "description": "The character's gender."}, {"in": "query", "name": "species", "schema": {"title": "Species", "description": "The character's species.", "q": "species__iexact", "type": "string"}, "required": false, "description": "The character's species."}, {"in": "query", "name": "nationality", "schema": {"title": "Nationality", "description": "The character's nationality.", "q": "nationality__iexact", "type": "string"}, "required": false, "description": "The character's nationality."}, {"in": "query", "name": "occupation", "schema": {"title": "Occupation(s)", "description": "Occupations the character officially has/has officially had.", "q": "occupations__icontains", "type": "array", "items": {"type": "string"}}, "required": false, "description": "Occupations the character officially has/has officially had."}, {"in": "query", "name": "limit", "schema": {"title": "Limit", "default": 100, "minimum": 1, "maximum": 100, "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"title": "Offset", "default": 0, "minimum": 0, "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PagedCharacterSchema"}}}}}, "description": "Returns a paginated list of all characters in the API.", "tags": ["Characters"]}}, "/v3/characters/{id}": {"get": {"operationId": "nekosapi_characters_api_character", "summary": "Get a character by ID", "parameters": [{"in": "path", "name": "id", "schema": {"title": "Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CharacterSchema"}}}}}, "description": "Returns a character by it's ID. You'll get a 404 if the character doesn't exist.", "tags": ["Characters"]}}, "/v3/characters/{id}/images": {"get": {"operationId": "nekosapi_characters_api_character_images", "summary": "Get a character's images", "parameters": [{"in": "path", "name": "id", "schema": {"title": "Id", "type": "integer"}, "required": true}, {"in": "query", "name": "limit", "schema": {"title": "Limit", "default": 100, "minimum": 1, "maximum": 100, "type": "integer"}, "required": false}, {"in": "query", "name": "offset", "schema": {"title": "Offset", "default": 0, "minimum": 0, "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PagedImageSchema"}}}}}, "description": "Returns a paginated list of a character's images.", "tags": ["Characters"]}}}, "components": {"schemas": {"ArtistSchema": {"title": "ArtistSchema", "type": "object", "properties": {"id": {"title": "ID", "description": "The artist's ID.", "type": "integer"}, "id_v2": {"title": "ID v2", "description": "The character's ID in the v2 API. Format: UUID", "type": "string", "format": "uuid"}, "name": {"title": "Name", "description": "The artist's name.", "type": "string"}, "aliases": {"title": "Aliases (AKA)", "description": "Other names by which the artist is known.", "type": "array", "items": {"type": "string"}}, "image_url": {"title": "PFP", "description": "An attempt to serve an artist PFP. This will probably stay outdated if they change their image after we upload it (they probably will at some point).", "type": "string"}, "links": {"title": "Links", "description": "A list of links to official pages for the artist, like SNS or their website. They may be outdated if the artist changes their URL.", "type": "array", "items": {"type": "string"}}, "policy_repost": {"title": "Reposting", "description": "Does this artist allow you to repost their art in other places?", "type": "boolean"}, "policy_credit": {"title": "Crediting", "description": "Are you required to credit the artist when using their art?", "default": true, "type": "boolean"}, "policy_ai": {"title": "AI Training", "description": "Does the artist allow you to use their art for AI projects (AI training)?", "default": false, "type": "boolean"}}, "required": ["id", "name", "aliases", "image_url", "links", "policy_repost"]}, "CharacterSchema": {"title": "CharacterSchema", "type": "object", "properties": {"id": {"title": "ID", "description": "The character's ID.", "type": "integer"}, "id_v2": {"title": "ID v2", "description": "The character's ID in the v2 API. Format: UUID", "type": "string", "format": "uuid"}, "name": {"title": "Name", "description": "The character's name.", "type": "string"}, "aliases": {"title": "Aliases (AKA)", "description": "Other names by which the character is known.", "type": "array", "items": {"type": "string"}}, "description": {"title": "Description", "description": "A description of the character.", "type": "string"}, "ages": {"title": "Ages", "description": "All the ages the character officially has/has officially had.", "type": "array", "items": {"type": "integer"}}, "height": {"title": "Height", "description": "The the character's height (in cm).", "type": "integer"}, "weight": {"title": "Weight", "description": "The character's weight (in kg).", "type": "integer"}, "gender": {"title": "Gender", "description": "The character's gender.", "type": "string"}, "species": {"title": "Species", "description": "The character's species.", "type": "string"}, "birthday": {"title": "Birthday", "description": "The character's birthday. Format: MM/DD", "type": "string"}, "nationality": {"title": "Nationality", "description": "The character's nationality.", "type": "string"}, "occupations": {"title": "Occupations", "description": "All the occupations the character officially has/has officially had.", "type": "array", "items": {"type": "string"}}}, "required": ["id", "id_v2", "name", "aliases", "description", "ages", "height", "weight", "gender", "species", "birthday", "nationality", "occupations"]}, "TagSchema": {"title": "TagSchema", "type": "object", "properties": {"id": {"title": "ID", "description": "The tag's ID.", "type": "integer"}, "id_v2": {"title": "ID v2", "description": "The tag's ID in the v2 API. Format: UUID", "type": "string", "format": "uuid"}, "name": {"title": "Name", "description": "The tag's name.", "type": "string"}, "description": {"title": "Description", "description": "A short description that says what the tag is and when it applies.", "type": "string"}, "sub": {"title": "Subtype", "description": "The subtype of the tag (format, character, setting).", "type": "string"}, "is_nsfw": {"title": "NSFW", "description": "Whether the tag is NSFW or not (usually, tags with this set to true will only be on NSFW images).", "type": "boolean"}}, "required": ["id", "id_v2", "name", "description", "sub", "is_nsfw"]}, "ImageSchema": {"title": "ImageSchema", "type": "object", "properties": {"id": {"title": "ID", "description": "The image's ID.", "type": "integer"}, "id_v2": {"title": "ID v2", "description": "The image's ID in the v2 API.", "type": "string", "format": "uuid"}, "image_url": {"title": "Image URL", "description": "The original/full image's URL. The format is always WEBP.", "type": "string"}, "sample_url": {"title": "Sample URL", "description": "The sample image's URL. It's a reduced version of the original image that is either 360px tall or 360px wide, whichever is smaller. The format is always WEBP.", "type": "string"}, "image_size": {"title": "Image Size", "description": "The file size of the image.", "type": "integer"}, "image_width": {"title": "Image Width", "description": "The width of the image.", "type": "integer"}, "image_height": {"title": "Image Height", "description": "The height of the image.", "type": "integer"}, "sample_size": {"title": "Sample Size", "description": "The file size of the sample image.", "type": "integer"}, "sample_width": {"title": "Sample Width", "description": "The width of the sample image.", "type": "integer"}, "sample_height": {"title": "Sample Height", "description": "The height of the sample image.", "type": "integer"}, "source": {"title": "Source", "description": "The source URL of the image (where it was first posted).", "type": "string"}, "source_id": {"title": "Source ID", "description": "The source ID of the sauce in [NekoSauce](https://nekosauce.org).", "type": "integer"}, "rating": {"title": "Rating", "description": "The age rating of the image.", "type": "string"}, "verification": {"title": "Verification", "description": "The verification level of the image. Normal users will only see images with this set to `verified`.", "type": "string"}, "hash_md5": {"title": "MD5 Hash", "description": "The MD5 hash of the image. This is a(n almost) unique identifier for the image.", "type": "string"}, "hash_perceptual": {"title": "Perceptual Hash", "description": "The perceptual hash of the image. This can be used to compare this image to other images.", "type": "string"}, "color_dominant": {"title": "Dominant Color", "description": "The dominant color of the image. [R, G, B]", "type": "array", "items": {"type": "integer"}}, "color_palette": {"title": "Color Palette", "description": "The color palette of the image. [[R, G, B], [R, G, B], ...]", "type": "array", "items": {"type": "array", "items": {"type": "integer"}}}, "duration": {"title": "Duration", "description": "The amount of frames that make up the image (if it's animated, check `is_animated`).", "type": "integer"}, "is_original": {"title": "Is Original", "description": "Whether the image's idea is original or it uses characters/settings/content from another place (not original).", "type": "boolean"}, "is_screenshot": {"title": "Is Screenshot", "description": "Whether the image is a screenshot of an anime ep./manga page.", "type": "boolean"}, "is_flagged": {"title": "Is Flagged", "description": "Whether the image is flagged by mods.", "type": "boolean"}, "is_animated": {"title": "Is Animated", "description": "Whether the image is animated or not. This'll become useful in the future when we add GIFs.", "type": "boolean"}, "artist": {"title": "Artist", "description": "The artist of the image.", "allOf": [{"$ref": "#/components/schemas/ArtistSchema"}]}, "characters": {"title": "Characters", "description": "The characters that appear in the image.", "type": "array", "items": {"$ref": "#/components/schemas/CharacterSchema"}}, "tags": {"title": "Tags", "description": "The image's tags.", "type": "array", "items": {"$ref": "#/components/schemas/TagSchema"}}, "created_at": {"title": "Created At", "description": "The time the image was created. This value is a POSIX timestamp.", "type": "number"}, "updated_at": {"title": "Updated At", "description": "The time the image was last updated. This value is a POSIX timestamp.", "type": "number"}}, "required": ["id", "id_v2", "image_url", "sample_url", "image_size", "image_width", "image_height", "sample_size", "sample_width", "sample_height", "source", "source_id", "rating", "verification", "hash_md5", "hash_perceptual", "color_dominant", "color_palette", "duration", "is_original", "is_screenshot", "is_flagged", "is_animated", "artist", "characters", "tags", "created_at", "updated_at"]}, "PagedImageSchema": {"title": "PagedImageSchema", "type": "object", "properties": {"items": {"title": "Items", "type": "array", "items": {"$ref": "#/components/schemas/ImageSchema"}}, "count": {"title": "Count", "type": "integer"}}, "required": ["items", "count"]}, "PagedTagSchema": {"title": "PagedTagSchema", "type": "object", "properties": {"items": {"title": "Items", "type": "array", "items": {"$ref": "#/components/schemas/TagSchema"}}, "count": {"title": "Count", "type": "integer"}}, "required": ["items", "count"]}, "PagedCharacterSchema": {"title": "PagedCharacterSchema", "type": "object", "properties": {"items": {"title": "Items", "type": "array", "items": {"$ref": "#/components/schemas/CharacterSchema"}}, "count": {"title": "Count", "type": "integer"}}, "required": ["items", "count"]}, "PagedArtistSchema": {"title": "PagedArtistSchema", "type": "object", "properties": {"items": {"title": "Items", "type": "array", "items": {"$ref": "#/components/schemas/ArtistSchema"}}, "count": {"title": "Count", "type": "integer"}}, "required": ["items", "count"]}}}, "servers": [{"url": "https://api.nekosapi.com", "description": "Production API"}]}