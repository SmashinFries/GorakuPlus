/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * PanelsDesu API
 * The official API for PanelsDesu
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useQuery
} from '@tanstack/react-query'
import type {
  InfiniteData,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  GetPanelGetPanel200,
  GetPanelGetSimilarPanels200,
  GetPanelGetSimilarPanelsParams,
  GetSearchSearchMedia200,
  GetSearchSearchMediaParams,
  GetStatsGetStats200
} from './models'




/**
 * @summary Search for manga panels
 */
export const getSearchSearchMedia = (
    params: GetSearchSearchMediaParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetSearchSearchMedia200>> => {
    
    return axios.get(
      `https://api.panelsdesu.com/v1/search`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetSearchSearchMediaQueryKey = (params: GetSearchSearchMediaParams,) => {
    return [`https://api.panelsdesu.com/v1/search`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSearchSearchMediaInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getSearchSearchMedia>>>, TError = AxiosError<unknown>>(params: GetSearchSearchMediaParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSearchSearchMedia>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSearchSearchMediaQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSearchSearchMedia>>> = ({ signal }) => getSearchSearchMedia(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSearchSearchMedia>>, TError, TData> & { queryKey: QueryKey }
}

export type GetSearchSearchMediaInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getSearchSearchMedia>>>
export type GetSearchSearchMediaInfiniteQueryError = AxiosError<unknown>

/**
 * @summary Search for manga panels
 */
export const useGetSearchSearchMediaInfinite = <TData = InfiniteData<Awaited<ReturnType<typeof getSearchSearchMedia>>>, TError = AxiosError<unknown>>(
 params: GetSearchSearchMediaParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSearchSearchMedia>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetSearchSearchMediaInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetSearchSearchMediaQueryOptions = <TData = Awaited<ReturnType<typeof getSearchSearchMedia>>, TError = AxiosError<unknown>>(params: GetSearchSearchMediaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSearchSearchMedia>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSearchSearchMediaQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSearchSearchMedia>>> = ({ signal }) => getSearchSearchMedia(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSearchSearchMedia>>, TError, TData> & { queryKey: QueryKey }
}

export type GetSearchSearchMediaQueryResult = NonNullable<Awaited<ReturnType<typeof getSearchSearchMedia>>>
export type GetSearchSearchMediaQueryError = AxiosError<unknown>

/**
 * @summary Search for manga panels
 */
export const useGetSearchSearchMedia = <TData = Awaited<ReturnType<typeof getSearchSearchMedia>>, TError = AxiosError<unknown>>(
 params: GetSearchSearchMediaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSearchSearchMedia>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetSearchSearchMediaQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get global stats
 */
export const getStatsGetStats = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetStatsGetStats200>> => {
    
    return axios.get(
      `https://api.panelsdesu.com/v1/stats`,options
    );
  }


export const getGetStatsGetStatsQueryKey = () => {
    return [`https://api.panelsdesu.com/v1/stats`] as const;
    }

    
export const getGetStatsGetStatsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getStatsGetStats>>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStatsGetStats>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStatsGetStatsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStatsGetStats>>> = ({ signal }) => getStatsGetStats({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStatsGetStats>>, TError, TData> & { queryKey: QueryKey }
}

export type GetStatsGetStatsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getStatsGetStats>>>
export type GetStatsGetStatsInfiniteQueryError = AxiosError<unknown>

/**
 * @summary Get global stats
 */
export const useGetStatsGetStatsInfinite = <TData = InfiniteData<Awaited<ReturnType<typeof getStatsGetStats>>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStatsGetStats>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetStatsGetStatsInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetStatsGetStatsQueryOptions = <TData = Awaited<ReturnType<typeof getStatsGetStats>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStatsGetStats>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStatsGetStatsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStatsGetStats>>> = ({ signal }) => getStatsGetStats({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStatsGetStats>>, TError, TData> & { queryKey: QueryKey }
}

export type GetStatsGetStatsQueryResult = NonNullable<Awaited<ReturnType<typeof getStatsGetStats>>>
export type GetStatsGetStatsQueryError = AxiosError<unknown>

/**
 * @summary Get global stats
 */
export const useGetStatsGetStats = <TData = Awaited<ReturnType<typeof getStatsGetStats>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStatsGetStats>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetStatsGetStatsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a panel by id
 */
export const getPanelGetPanel = (
    panelId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetPanelGetPanel200>> => {
    
    return axios.get(
      `https://api.panelsdesu.com/v1/panel/${panelId}`,options
    );
  }


export const getGetPanelGetPanelQueryKey = (panelId: string,) => {
    return [`https://api.panelsdesu.com/v1/panel/${panelId}`] as const;
    }

    
export const getGetPanelGetPanelInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getPanelGetPanel>>>, TError = AxiosError<unknown>>(panelId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPanelGetPanel>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPanelGetPanelQueryKey(panelId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPanelGetPanel>>> = ({ signal }) => getPanelGetPanel(panelId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(panelId),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPanelGetPanel>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPanelGetPanelInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getPanelGetPanel>>>
export type GetPanelGetPanelInfiniteQueryError = AxiosError<unknown>

/**
 * @summary Get a panel by id
 */
export const useGetPanelGetPanelInfinite = <TData = InfiniteData<Awaited<ReturnType<typeof getPanelGetPanel>>>, TError = AxiosError<unknown>>(
 panelId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPanelGetPanel>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetPanelGetPanelInfiniteQueryOptions(panelId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetPanelGetPanelQueryOptions = <TData = Awaited<ReturnType<typeof getPanelGetPanel>>, TError = AxiosError<unknown>>(panelId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPanelGetPanel>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPanelGetPanelQueryKey(panelId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPanelGetPanel>>> = ({ signal }) => getPanelGetPanel(panelId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(panelId),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPanelGetPanel>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPanelGetPanelQueryResult = NonNullable<Awaited<ReturnType<typeof getPanelGetPanel>>>
export type GetPanelGetPanelQueryError = AxiosError<unknown>

/**
 * @summary Get a panel by id
 */
export const useGetPanelGetPanel = <TData = Awaited<ReturnType<typeof getPanelGetPanel>>, TError = AxiosError<unknown>>(
 panelId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPanelGetPanel>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetPanelGetPanelQueryOptions(panelId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get panels similar to a panel
 */
export const getPanelGetSimilarPanels = (
    panelId: string,
    params?: GetPanelGetSimilarPanelsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetPanelGetSimilarPanels200>> => {
    
    return axios.get(
      `https://api.panelsdesu.com/v1/panel/${panelId}/similar`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetPanelGetSimilarPanelsQueryKey = (panelId: string,
    params?: GetPanelGetSimilarPanelsParams,) => {
    return [`https://api.panelsdesu.com/v1/panel/${panelId}/similar`, ...(params ? [params]: [])] as const;
    }

    
export const getGetPanelGetSimilarPanelsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getPanelGetSimilarPanels>>>, TError = AxiosError<unknown>>(panelId: string,
    params?: GetPanelGetSimilarPanelsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPanelGetSimilarPanels>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPanelGetSimilarPanelsQueryKey(panelId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPanelGetSimilarPanels>>> = ({ signal }) => getPanelGetSimilarPanels(panelId,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(panelId),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPanelGetSimilarPanels>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPanelGetSimilarPanelsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getPanelGetSimilarPanels>>>
export type GetPanelGetSimilarPanelsInfiniteQueryError = AxiosError<unknown>

/**
 * @summary Get panels similar to a panel
 */
export const useGetPanelGetSimilarPanelsInfinite = <TData = InfiniteData<Awaited<ReturnType<typeof getPanelGetSimilarPanels>>>, TError = AxiosError<unknown>>(
 panelId: string,
    params?: GetPanelGetSimilarPanelsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPanelGetSimilarPanels>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetPanelGetSimilarPanelsInfiniteQueryOptions(panelId,params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetPanelGetSimilarPanelsQueryOptions = <TData = Awaited<ReturnType<typeof getPanelGetSimilarPanels>>, TError = AxiosError<unknown>>(panelId: string,
    params?: GetPanelGetSimilarPanelsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPanelGetSimilarPanels>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPanelGetSimilarPanelsQueryKey(panelId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPanelGetSimilarPanels>>> = ({ signal }) => getPanelGetSimilarPanels(panelId,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(panelId),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPanelGetSimilarPanels>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPanelGetSimilarPanelsQueryResult = NonNullable<Awaited<ReturnType<typeof getPanelGetSimilarPanels>>>
export type GetPanelGetSimilarPanelsQueryError = AxiosError<unknown>

/**
 * @summary Get panels similar to a panel
 */
export const useGetPanelGetSimilarPanels = <TData = Awaited<ReturnType<typeof getPanelGetSimilarPanels>>, TError = AxiosError<unknown>>(
 panelId: string,
    params?: GetPanelGetSimilarPanelsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPanelGetSimilarPanels>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetPanelGetSimilarPanelsQueryOptions(panelId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




