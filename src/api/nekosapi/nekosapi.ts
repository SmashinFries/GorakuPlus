/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Nekos API
 * An open source anime art API.
 * OpenAPI spec version: 3
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  ArtistSchema,
  CharacterSchema,
  ImageSchema,
  NekosapiArtistsApiArtistImagesParams,
  NekosapiArtistsApiArtistsParams,
  NekosapiCharactersApiCharacterImagesParams,
  NekosapiCharactersApiCharactersParams,
  NekosapiImagesApiImageCharactersParams,
  NekosapiImagesApiImageReportParams,
  NekosapiImagesApiImageTagsParams,
  NekosapiImagesApiImagesParams,
  NekosapiImagesApiRandomImageFileParams,
  NekosapiImagesApiRandomImagesParams,
  NekosapiImagesApiTagImagesParams,
  NekosapiImagesApiTagsParams,
  PagedArtistSchema,
  PagedCharacterSchema,
  PagedImageSchema,
  PagedTagSchema,
  TagSchema
} from './models'




/**
 * Returns a bunch of data about the API, like endpoints, versions, and more. This is not really intended to be used by programs, but rather for users (devs) to see when they first use the API.
 * @summary Get a summary of the API.
 */
export const nekosapiApiIndex = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.get(
      `https://api.nekosapi.com/v3/`,options
    );
  }


export const getNekosapiApiIndexQueryKey = () => {
    return [`https://api.nekosapi.com/v3/`] as const;
    }

    
export const getNekosapiApiIndexQueryOptions = <TData = Awaited<ReturnType<typeof nekosapiApiIndex>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiApiIndex>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getNekosapiApiIndexQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof nekosapiApiIndex>>> = ({ signal }) => nekosapiApiIndex({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof nekosapiApiIndex>>, TError, TData> & { queryKey: QueryKey }
}

export type NekosapiApiIndexQueryResult = NonNullable<Awaited<ReturnType<typeof nekosapiApiIndex>>>
export type NekosapiApiIndexQueryError = AxiosError<unknown>

/**
 * @summary Get a summary of the API.
 */
export const useNekosapiApiIndex = <TData = Awaited<ReturnType<typeof nekosapiApiIndex>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiApiIndex>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getNekosapiApiIndexQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Returns a paginated list of all the verified images in the API.
 * @summary Get all images
 */
export const nekosapiImagesApiImages = (
    params?: NekosapiImagesApiImagesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagedImageSchema>> => {
    
    return axios.get(
      `https://api.nekosapi.com/v3/images`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getNekosapiImagesApiImagesQueryKey = (params?: NekosapiImagesApiImagesParams,) => {
    return [`https://api.nekosapi.com/v3/images`, ...(params ? [params]: [])] as const;
    }

    
export const getNekosapiImagesApiImagesQueryOptions = <TData = Awaited<ReturnType<typeof nekosapiImagesApiImages>>, TError = AxiosError<unknown>>(params?: NekosapiImagesApiImagesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiImages>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getNekosapiImagesApiImagesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof nekosapiImagesApiImages>>> = ({ signal }) => nekosapiImagesApiImages(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiImages>>, TError, TData> & { queryKey: QueryKey }
}

export type NekosapiImagesApiImagesQueryResult = NonNullable<Awaited<ReturnType<typeof nekosapiImagesApiImages>>>
export type NekosapiImagesApiImagesQueryError = AxiosError<unknown>

/**
 * @summary Get all images
 */
export const useNekosapiImagesApiImages = <TData = Awaited<ReturnType<typeof nekosapiImagesApiImages>>, TError = AxiosError<unknown>>(
 params?: NekosapiImagesApiImagesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiImages>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getNekosapiImagesApiImagesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Returns x random images. It supports all the same filters than the /images endpoint.
 * @summary Get random images
 */
export const nekosapiImagesApiRandomImages = (
    params?: NekosapiImagesApiRandomImagesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagedImageSchema>> => {
    
    return axios.get(
      `https://api.nekosapi.com/v3/images/random`,{
    ...options,
        params: {...params, ...options?.params}, paramsSerializer: {indexes: null}}
    );
  }


export const getNekosapiImagesApiRandomImagesQueryKey = (params?: NekosapiImagesApiRandomImagesParams,) => {
    return [`https://api.nekosapi.com/v3/images/random`, ...(params ? [params]: [])] as const;
    }

    
export const getNekosapiImagesApiRandomImagesQueryOptions = <TData = Awaited<ReturnType<typeof nekosapiImagesApiRandomImages>>, TError = AxiosError<unknown>>(params?: NekosapiImagesApiRandomImagesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiRandomImages>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getNekosapiImagesApiRandomImagesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof nekosapiImagesApiRandomImages>>> = ({ signal }) => nekosapiImagesApiRandomImages(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiRandomImages>>, TError, TData> & { queryKey: QueryKey }
}

export type NekosapiImagesApiRandomImagesQueryResult = NonNullable<Awaited<ReturnType<typeof nekosapiImagesApiRandomImages>>>
export type NekosapiImagesApiRandomImagesQueryError = AxiosError<unknown>

/**
 * @summary Get random images
 */
export const useNekosapiImagesApiRandomImages = <TData = Awaited<ReturnType<typeof nekosapiImagesApiRandomImages>>, TError = AxiosError<unknown>>(
 params?: NekosapiImagesApiRandomImagesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiRandomImages>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getNekosapiImagesApiRandomImagesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Redirects to a random image file URL.
 * @summary Get a random image file redirect
 */
export const nekosapiImagesApiRandomImageFile = (
    params?: NekosapiImagesApiRandomImageFileParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.get(
      `https://api.nekosapi.com/v3/images/random/file`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getNekosapiImagesApiRandomImageFileQueryKey = (params?: NekosapiImagesApiRandomImageFileParams,) => {
    return [`https://api.nekosapi.com/v3/images/random/file`, ...(params ? [params]: [])] as const;
    }

    
export const getNekosapiImagesApiRandomImageFileQueryOptions = <TData = Awaited<ReturnType<typeof nekosapiImagesApiRandomImageFile>>, TError = AxiosError<unknown>>(params?: NekosapiImagesApiRandomImageFileParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiRandomImageFile>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getNekosapiImagesApiRandomImageFileQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof nekosapiImagesApiRandomImageFile>>> = ({ signal }) => nekosapiImagesApiRandomImageFile(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiRandomImageFile>>, TError, TData> & { queryKey: QueryKey }
}

export type NekosapiImagesApiRandomImageFileQueryResult = NonNullable<Awaited<ReturnType<typeof nekosapiImagesApiRandomImageFile>>>
export type NekosapiImagesApiRandomImageFileQueryError = AxiosError<unknown>

/**
 * @summary Get a random image file redirect
 */
export const useNekosapiImagesApiRandomImageFile = <TData = Awaited<ReturnType<typeof nekosapiImagesApiRandomImageFile>>, TError = AxiosError<unknown>>(
 params?: NekosapiImagesApiRandomImageFileParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiRandomImageFile>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getNekosapiImagesApiRandomImageFileQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Reports an image.
 * @summary Create an image report
 */
export const nekosapiImagesApiImageReport = (
    params?: NekosapiImagesApiImageReportParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.post(
      `https://api.nekosapi.com/v3/images/report`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getNekosapiImagesApiImageReportMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof nekosapiImagesApiImageReport>>, TError,{params?: NekosapiImagesApiImageReportParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof nekosapiImagesApiImageReport>>, TError,{params?: NekosapiImagesApiImageReportParams}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof nekosapiImagesApiImageReport>>, {params?: NekosapiImagesApiImageReportParams}> = (props) => {
          const {params} = props ?? {};

          return  nekosapiImagesApiImageReport(params,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type NekosapiImagesApiImageReportMutationResult = NonNullable<Awaited<ReturnType<typeof nekosapiImagesApiImageReport>>>
    
    export type NekosapiImagesApiImageReportMutationError = AxiosError<unknown>

    /**
 * @summary Create an image report
 */
export const useNekosapiImagesApiImageReport = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof nekosapiImagesApiImageReport>>, TError,{params?: NekosapiImagesApiImageReportParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof nekosapiImagesApiImageReport>>,
        TError,
        {params?: NekosapiImagesApiImageReportParams},
        TContext
      > => {

      const mutationOptions = getNekosapiImagesApiImageReportMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Returns a list of all tags in the API. You can use this endpoint to create filters in your app.
 * @summary Get all tags
 */
export const nekosapiImagesApiTags = (
    params?: NekosapiImagesApiTagsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagedTagSchema>> => {
    
    return axios.get(
      `https://api.nekosapi.com/v3/images/tags`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getNekosapiImagesApiTagsQueryKey = (params?: NekosapiImagesApiTagsParams,) => {
    return [`https://api.nekosapi.com/v3/images/tags`, ...(params ? [params]: [])] as const;
    }

    
export const getNekosapiImagesApiTagsQueryOptions = <TData = Awaited<ReturnType<typeof nekosapiImagesApiTags>>, TError = AxiosError<unknown>>(params?: NekosapiImagesApiTagsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiTags>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getNekosapiImagesApiTagsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof nekosapiImagesApiTags>>> = ({ signal }) => nekosapiImagesApiTags(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiTags>>, TError, TData> & { queryKey: QueryKey }
}

export type NekosapiImagesApiTagsQueryResult = NonNullable<Awaited<ReturnType<typeof nekosapiImagesApiTags>>>
export type NekosapiImagesApiTagsQueryError = AxiosError<unknown>

/**
 * @summary Get all tags
 */
export const useNekosapiImagesApiTags = <TData = Awaited<ReturnType<typeof nekosapiImagesApiTags>>, TError = AxiosError<unknown>>(
 params?: NekosapiImagesApiTagsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiTags>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getNekosapiImagesApiTagsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Returns a tag by it's ID. You'll get a 404 if the tag doesn't exist.
 * @summary Get a tag by ID
 */
export const nekosapiImagesApiTag = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TagSchema>> => {
    
    return axios.get(
      `https://api.nekosapi.com/v3/images/tags/${id}`,options
    );
  }


export const getNekosapiImagesApiTagQueryKey = (id: number,) => {
    return [`https://api.nekosapi.com/v3/images/tags/${id}`] as const;
    }

    
export const getNekosapiImagesApiTagQueryOptions = <TData = Awaited<ReturnType<typeof nekosapiImagesApiTag>>, TError = AxiosError<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiTag>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getNekosapiImagesApiTagQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof nekosapiImagesApiTag>>> = ({ signal }) => nekosapiImagesApiTag(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiTag>>, TError, TData> & { queryKey: QueryKey }
}

export type NekosapiImagesApiTagQueryResult = NonNullable<Awaited<ReturnType<typeof nekosapiImagesApiTag>>>
export type NekosapiImagesApiTagQueryError = AxiosError<unknown>

/**
 * @summary Get a tag by ID
 */
export const useNekosapiImagesApiTag = <TData = Awaited<ReturnType<typeof nekosapiImagesApiTag>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiTag>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getNekosapiImagesApiTagQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Returns a paginated list of a tag's images.
 * @summary Get a tag's images
 */
export const nekosapiImagesApiTagImages = (
    id: number,
    params?: NekosapiImagesApiTagImagesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagedImageSchema>> => {
    
    return axios.get(
      `https://api.nekosapi.com/v3/images/tags/${id}/images`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getNekosapiImagesApiTagImagesQueryKey = (id: number,
    params?: NekosapiImagesApiTagImagesParams,) => {
    return [`https://api.nekosapi.com/v3/images/tags/${id}/images`, ...(params ? [params]: [])] as const;
    }

    
export const getNekosapiImagesApiTagImagesQueryOptions = <TData = Awaited<ReturnType<typeof nekosapiImagesApiTagImages>>, TError = AxiosError<unknown>>(id: number,
    params?: NekosapiImagesApiTagImagesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiTagImages>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getNekosapiImagesApiTagImagesQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof nekosapiImagesApiTagImages>>> = ({ signal }) => nekosapiImagesApiTagImages(id,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiTagImages>>, TError, TData> & { queryKey: QueryKey }
}

export type NekosapiImagesApiTagImagesQueryResult = NonNullable<Awaited<ReturnType<typeof nekosapiImagesApiTagImages>>>
export type NekosapiImagesApiTagImagesQueryError = AxiosError<unknown>

/**
 * @summary Get a tag's images
 */
export const useNekosapiImagesApiTagImages = <TData = Awaited<ReturnType<typeof nekosapiImagesApiTagImages>>, TError = AxiosError<unknown>>(
 id: number,
    params?: NekosapiImagesApiTagImagesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiTagImages>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getNekosapiImagesApiTagImagesQueryOptions(id,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Returns an image by it's ID. You'll get a 404 if the image doesn't exist. (This endpoint is here below because all the previous ones are resolved first).
 * @summary Get an image by ID
 */
export const nekosapiImagesApiImage = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ImageSchema>> => {
    
    return axios.get(
      `https://api.nekosapi.com/v3/images/${id}`,options
    );
  }


export const getNekosapiImagesApiImageQueryKey = (id: number,) => {
    return [`https://api.nekosapi.com/v3/images/${id}`] as const;
    }

    
export const getNekosapiImagesApiImageQueryOptions = <TData = Awaited<ReturnType<typeof nekosapiImagesApiImage>>, TError = AxiosError<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiImage>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getNekosapiImagesApiImageQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof nekosapiImagesApiImage>>> = ({ signal }) => nekosapiImagesApiImage(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiImage>>, TError, TData> & { queryKey: QueryKey }
}

export type NekosapiImagesApiImageQueryResult = NonNullable<Awaited<ReturnType<typeof nekosapiImagesApiImage>>>
export type NekosapiImagesApiImageQueryError = AxiosError<unknown>

/**
 * @summary Get an image by ID
 */
export const useNekosapiImagesApiImage = <TData = Awaited<ReturnType<typeof nekosapiImagesApiImage>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiImage>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getNekosapiImagesApiImageQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Returns the artist of the image.
 * @summary Get an image's artist
 */
export const nekosapiImagesApiImageArtist = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArtistSchema>> => {
    
    return axios.get(
      `https://api.nekosapi.com/v3/images/${id}/artist`,options
    );
  }


export const getNekosapiImagesApiImageArtistQueryKey = (id: number,) => {
    return [`https://api.nekosapi.com/v3/images/${id}/artist`] as const;
    }

    
export const getNekosapiImagesApiImageArtistQueryOptions = <TData = Awaited<ReturnType<typeof nekosapiImagesApiImageArtist>>, TError = AxiosError<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiImageArtist>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getNekosapiImagesApiImageArtistQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof nekosapiImagesApiImageArtist>>> = ({ signal }) => nekosapiImagesApiImageArtist(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiImageArtist>>, TError, TData> & { queryKey: QueryKey }
}

export type NekosapiImagesApiImageArtistQueryResult = NonNullable<Awaited<ReturnType<typeof nekosapiImagesApiImageArtist>>>
export type NekosapiImagesApiImageArtistQueryError = AxiosError<unknown>

/**
 * @summary Get an image's artist
 */
export const useNekosapiImagesApiImageArtist = <TData = Awaited<ReturnType<typeof nekosapiImagesApiImageArtist>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiImageArtist>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getNekosapiImagesApiImageArtistQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Returns the characters of the image.
 * @summary Get an image's characters
 */
export const nekosapiImagesApiImageCharacters = (
    id: number,
    params?: NekosapiImagesApiImageCharactersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagedCharacterSchema>> => {
    
    return axios.get(
      `https://api.nekosapi.com/v3/images/${id}/characters`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getNekosapiImagesApiImageCharactersQueryKey = (id: number,
    params?: NekosapiImagesApiImageCharactersParams,) => {
    return [`https://api.nekosapi.com/v3/images/${id}/characters`, ...(params ? [params]: [])] as const;
    }

    
export const getNekosapiImagesApiImageCharactersQueryOptions = <TData = Awaited<ReturnType<typeof nekosapiImagesApiImageCharacters>>, TError = AxiosError<unknown>>(id: number,
    params?: NekosapiImagesApiImageCharactersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiImageCharacters>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getNekosapiImagesApiImageCharactersQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof nekosapiImagesApiImageCharacters>>> = ({ signal }) => nekosapiImagesApiImageCharacters(id,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiImageCharacters>>, TError, TData> & { queryKey: QueryKey }
}

export type NekosapiImagesApiImageCharactersQueryResult = NonNullable<Awaited<ReturnType<typeof nekosapiImagesApiImageCharacters>>>
export type NekosapiImagesApiImageCharactersQueryError = AxiosError<unknown>

/**
 * @summary Get an image's characters
 */
export const useNekosapiImagesApiImageCharacters = <TData = Awaited<ReturnType<typeof nekosapiImagesApiImageCharacters>>, TError = AxiosError<unknown>>(
 id: number,
    params?: NekosapiImagesApiImageCharactersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiImageCharacters>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getNekosapiImagesApiImageCharactersQueryOptions(id,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Returns the tags of the image.
 * @summary Get an image's tags
 */
export const nekosapiImagesApiImageTags = (
    id: number,
    params?: NekosapiImagesApiImageTagsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagedTagSchema>> => {
    
    return axios.get(
      `https://api.nekosapi.com/v3/images/${id}/tags`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getNekosapiImagesApiImageTagsQueryKey = (id: number,
    params?: NekosapiImagesApiImageTagsParams,) => {
    return [`https://api.nekosapi.com/v3/images/${id}/tags`, ...(params ? [params]: [])] as const;
    }

    
export const getNekosapiImagesApiImageTagsQueryOptions = <TData = Awaited<ReturnType<typeof nekosapiImagesApiImageTags>>, TError = AxiosError<unknown>>(id: number,
    params?: NekosapiImagesApiImageTagsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiImageTags>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getNekosapiImagesApiImageTagsQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof nekosapiImagesApiImageTags>>> = ({ signal }) => nekosapiImagesApiImageTags(id,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiImageTags>>, TError, TData> & { queryKey: QueryKey }
}

export type NekosapiImagesApiImageTagsQueryResult = NonNullable<Awaited<ReturnType<typeof nekosapiImagesApiImageTags>>>
export type NekosapiImagesApiImageTagsQueryError = AxiosError<unknown>

/**
 * @summary Get an image's tags
 */
export const useNekosapiImagesApiImageTags = <TData = Awaited<ReturnType<typeof nekosapiImagesApiImageTags>>, TError = AxiosError<unknown>>(
 id: number,
    params?: NekosapiImagesApiImageTagsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiImagesApiImageTags>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getNekosapiImagesApiImageTagsQueryOptions(id,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Returns a paginated list of all artists listed in the API.
 * @summary Get all artists
 */
export const nekosapiArtistsApiArtists = (
    params?: NekosapiArtistsApiArtistsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagedArtistSchema>> => {
    
    return axios.get(
      `https://api.nekosapi.com/v3/artists`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getNekosapiArtistsApiArtistsQueryKey = (params?: NekosapiArtistsApiArtistsParams,) => {
    return [`https://api.nekosapi.com/v3/artists`, ...(params ? [params]: [])] as const;
    }

    
export const getNekosapiArtistsApiArtistsQueryOptions = <TData = Awaited<ReturnType<typeof nekosapiArtistsApiArtists>>, TError = AxiosError<unknown>>(params?: NekosapiArtistsApiArtistsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiArtistsApiArtists>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getNekosapiArtistsApiArtistsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof nekosapiArtistsApiArtists>>> = ({ signal }) => nekosapiArtistsApiArtists(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof nekosapiArtistsApiArtists>>, TError, TData> & { queryKey: QueryKey }
}

export type NekosapiArtistsApiArtistsQueryResult = NonNullable<Awaited<ReturnType<typeof nekosapiArtistsApiArtists>>>
export type NekosapiArtistsApiArtistsQueryError = AxiosError<unknown>

/**
 * @summary Get all artists
 */
export const useNekosapiArtistsApiArtists = <TData = Awaited<ReturnType<typeof nekosapiArtistsApiArtists>>, TError = AxiosError<unknown>>(
 params?: NekosapiArtistsApiArtistsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiArtistsApiArtists>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getNekosapiArtistsApiArtistsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Returns a single artist by it's ID. You'll get a 404 if the artist doesn't exist.
 * @summary Get an artist by ID
 */
export const nekosapiArtistsApiArtist = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArtistSchema>> => {
    
    return axios.get(
      `https://api.nekosapi.com/v3/artists/${id}`,options
    );
  }


export const getNekosapiArtistsApiArtistQueryKey = (id: number,) => {
    return [`https://api.nekosapi.com/v3/artists/${id}`] as const;
    }

    
export const getNekosapiArtistsApiArtistQueryOptions = <TData = Awaited<ReturnType<typeof nekosapiArtistsApiArtist>>, TError = AxiosError<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiArtistsApiArtist>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getNekosapiArtistsApiArtistQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof nekosapiArtistsApiArtist>>> = ({ signal }) => nekosapiArtistsApiArtist(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof nekosapiArtistsApiArtist>>, TError, TData> & { queryKey: QueryKey }
}

export type NekosapiArtistsApiArtistQueryResult = NonNullable<Awaited<ReturnType<typeof nekosapiArtistsApiArtist>>>
export type NekosapiArtistsApiArtistQueryError = AxiosError<unknown>

/**
 * @summary Get an artist by ID
 */
export const useNekosapiArtistsApiArtist = <TData = Awaited<ReturnType<typeof nekosapiArtistsApiArtist>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiArtistsApiArtist>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getNekosapiArtistsApiArtistQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Returns a paginated list of an artist's images.
 * @summary Get an artist's images
 */
export const nekosapiArtistsApiArtistImages = (
    id: number,
    params?: NekosapiArtistsApiArtistImagesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagedImageSchema>> => {
    
    return axios.get(
      `https://api.nekosapi.com/v3/artists/${id}/images`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getNekosapiArtistsApiArtistImagesQueryKey = (id: number,
    params?: NekosapiArtistsApiArtistImagesParams,) => {
    return [`https://api.nekosapi.com/v3/artists/${id}/images`, ...(params ? [params]: [])] as const;
    }

    
export const getNekosapiArtistsApiArtistImagesQueryOptions = <TData = Awaited<ReturnType<typeof nekosapiArtistsApiArtistImages>>, TError = AxiosError<unknown>>(id: number,
    params?: NekosapiArtistsApiArtistImagesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiArtistsApiArtistImages>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getNekosapiArtistsApiArtistImagesQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof nekosapiArtistsApiArtistImages>>> = ({ signal }) => nekosapiArtistsApiArtistImages(id,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof nekosapiArtistsApiArtistImages>>, TError, TData> & { queryKey: QueryKey }
}

export type NekosapiArtistsApiArtistImagesQueryResult = NonNullable<Awaited<ReturnType<typeof nekosapiArtistsApiArtistImages>>>
export type NekosapiArtistsApiArtistImagesQueryError = AxiosError<unknown>

/**
 * @summary Get an artist's images
 */
export const useNekosapiArtistsApiArtistImages = <TData = Awaited<ReturnType<typeof nekosapiArtistsApiArtistImages>>, TError = AxiosError<unknown>>(
 id: number,
    params?: NekosapiArtistsApiArtistImagesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiArtistsApiArtistImages>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getNekosapiArtistsApiArtistImagesQueryOptions(id,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Returns a paginated list of all characters in the API.
 * @summary Get all characters
 */
export const nekosapiCharactersApiCharacters = (
    params?: NekosapiCharactersApiCharactersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagedCharacterSchema>> => {
    
    return axios.get(
      `https://api.nekosapi.com/v3/characters`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getNekosapiCharactersApiCharactersQueryKey = (params?: NekosapiCharactersApiCharactersParams,) => {
    return [`https://api.nekosapi.com/v3/characters`, ...(params ? [params]: [])] as const;
    }

    
export const getNekosapiCharactersApiCharactersQueryOptions = <TData = Awaited<ReturnType<typeof nekosapiCharactersApiCharacters>>, TError = AxiosError<unknown>>(params?: NekosapiCharactersApiCharactersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiCharactersApiCharacters>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getNekosapiCharactersApiCharactersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof nekosapiCharactersApiCharacters>>> = ({ signal }) => nekosapiCharactersApiCharacters(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof nekosapiCharactersApiCharacters>>, TError, TData> & { queryKey: QueryKey }
}

export type NekosapiCharactersApiCharactersQueryResult = NonNullable<Awaited<ReturnType<typeof nekosapiCharactersApiCharacters>>>
export type NekosapiCharactersApiCharactersQueryError = AxiosError<unknown>

/**
 * @summary Get all characters
 */
export const useNekosapiCharactersApiCharacters = <TData = Awaited<ReturnType<typeof nekosapiCharactersApiCharacters>>, TError = AxiosError<unknown>>(
 params?: NekosapiCharactersApiCharactersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiCharactersApiCharacters>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getNekosapiCharactersApiCharactersQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Returns a character by it's ID. You'll get a 404 if the character doesn't exist.
 * @summary Get a character by ID
 */
export const nekosapiCharactersApiCharacter = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CharacterSchema>> => {
    
    return axios.get(
      `https://api.nekosapi.com/v3/characters/${id}`,options
    );
  }


export const getNekosapiCharactersApiCharacterQueryKey = (id: number,) => {
    return [`https://api.nekosapi.com/v3/characters/${id}`] as const;
    }

    
export const getNekosapiCharactersApiCharacterQueryOptions = <TData = Awaited<ReturnType<typeof nekosapiCharactersApiCharacter>>, TError = AxiosError<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiCharactersApiCharacter>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getNekosapiCharactersApiCharacterQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof nekosapiCharactersApiCharacter>>> = ({ signal }) => nekosapiCharactersApiCharacter(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof nekosapiCharactersApiCharacter>>, TError, TData> & { queryKey: QueryKey }
}

export type NekosapiCharactersApiCharacterQueryResult = NonNullable<Awaited<ReturnType<typeof nekosapiCharactersApiCharacter>>>
export type NekosapiCharactersApiCharacterQueryError = AxiosError<unknown>

/**
 * @summary Get a character by ID
 */
export const useNekosapiCharactersApiCharacter = <TData = Awaited<ReturnType<typeof nekosapiCharactersApiCharacter>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiCharactersApiCharacter>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getNekosapiCharactersApiCharacterQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Returns a paginated list of a character's images.
 * @summary Get a character's images
 */
export const nekosapiCharactersApiCharacterImages = (
    id: number,
    params?: NekosapiCharactersApiCharacterImagesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagedImageSchema>> => {
    
    return axios.get(
      `https://api.nekosapi.com/v3/characters/${id}/images`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getNekosapiCharactersApiCharacterImagesQueryKey = (id: number,
    params?: NekosapiCharactersApiCharacterImagesParams,) => {
    return [`https://api.nekosapi.com/v3/characters/${id}/images`, ...(params ? [params]: [])] as const;
    }

    
export const getNekosapiCharactersApiCharacterImagesQueryOptions = <TData = Awaited<ReturnType<typeof nekosapiCharactersApiCharacterImages>>, TError = AxiosError<unknown>>(id: number,
    params?: NekosapiCharactersApiCharacterImagesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiCharactersApiCharacterImages>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getNekosapiCharactersApiCharacterImagesQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof nekosapiCharactersApiCharacterImages>>> = ({ signal }) => nekosapiCharactersApiCharacterImages(id,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof nekosapiCharactersApiCharacterImages>>, TError, TData> & { queryKey: QueryKey }
}

export type NekosapiCharactersApiCharacterImagesQueryResult = NonNullable<Awaited<ReturnType<typeof nekosapiCharactersApiCharacterImages>>>
export type NekosapiCharactersApiCharacterImagesQueryError = AxiosError<unknown>

/**
 * @summary Get a character's images
 */
export const useNekosapiCharactersApiCharacterImages = <TData = Awaited<ReturnType<typeof nekosapiCharactersApiCharacterImages>>, TError = AxiosError<unknown>>(
 id: number,
    params?: NekosapiCharactersApiCharacterImagesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nekosapiCharactersApiCharacterImages>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getNekosapiCharactersApiCharacterImagesQueryOptions(id,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




